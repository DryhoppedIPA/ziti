// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openziti/ziti/controller/rest_model"
)

// ClusterMemberAddOKCode is the HTTP code returned for type ClusterMemberAddOK
const ClusterMemberAddOKCode int = 200

/*ClusterMemberAddOK Base empty response

swagger:response clusterMemberAddOK
*/
type ClusterMemberAddOK struct {

	/*
	  In: Body
	*/
	Payload *rest_model.Empty `json:"body,omitempty"`
}

// NewClusterMemberAddOK creates ClusterMemberAddOK with default headers values
func NewClusterMemberAddOK() *ClusterMemberAddOK {

	return &ClusterMemberAddOK{}
}

// WithPayload adds the payload to the cluster member add o k response
func (o *ClusterMemberAddOK) WithPayload(payload *rest_model.Empty) *ClusterMemberAddOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the cluster member add o k response
func (o *ClusterMemberAddOK) SetPayload(payload *rest_model.Empty) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ClusterMemberAddOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ClusterMemberAddBadRequestCode is the HTTP code returned for type ClusterMemberAddBadRequest
const ClusterMemberAddBadRequestCode int = 400

/*ClusterMemberAddBadRequest The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information

swagger:response clusterMemberAddBadRequest
*/
type ClusterMemberAddBadRequest struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewClusterMemberAddBadRequest creates ClusterMemberAddBadRequest with default headers values
func NewClusterMemberAddBadRequest() *ClusterMemberAddBadRequest {

	return &ClusterMemberAddBadRequest{}
}

// WithPayload adds the payload to the cluster member add bad request response
func (o *ClusterMemberAddBadRequest) WithPayload(payload *rest_model.APIErrorEnvelope) *ClusterMemberAddBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the cluster member add bad request response
func (o *ClusterMemberAddBadRequest) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ClusterMemberAddBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ClusterMemberAddUnauthorizedCode is the HTTP code returned for type ClusterMemberAddUnauthorized
const ClusterMemberAddUnauthorizedCode int = 401

/*ClusterMemberAddUnauthorized The currently supplied session does not have the correct access rights to request this resource

swagger:response clusterMemberAddUnauthorized
*/
type ClusterMemberAddUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewClusterMemberAddUnauthorized creates ClusterMemberAddUnauthorized with default headers values
func NewClusterMemberAddUnauthorized() *ClusterMemberAddUnauthorized {

	return &ClusterMemberAddUnauthorized{}
}

// WithPayload adds the payload to the cluster member add unauthorized response
func (o *ClusterMemberAddUnauthorized) WithPayload(payload *rest_model.APIErrorEnvelope) *ClusterMemberAddUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the cluster member add unauthorized response
func (o *ClusterMemberAddUnauthorized) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ClusterMemberAddUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ClusterMemberAddTooManyRequestsCode is the HTTP code returned for type ClusterMemberAddTooManyRequests
const ClusterMemberAddTooManyRequestsCode int = 429

/*ClusterMemberAddTooManyRequests The resource requested is rate limited and the rate limit has been exceeded

swagger:response clusterMemberAddTooManyRequests
*/
type ClusterMemberAddTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewClusterMemberAddTooManyRequests creates ClusterMemberAddTooManyRequests with default headers values
func NewClusterMemberAddTooManyRequests() *ClusterMemberAddTooManyRequests {

	return &ClusterMemberAddTooManyRequests{}
}

// WithPayload adds the payload to the cluster member add too many requests response
func (o *ClusterMemberAddTooManyRequests) WithPayload(payload *rest_model.APIErrorEnvelope) *ClusterMemberAddTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the cluster member add too many requests response
func (o *ClusterMemberAddTooManyRequests) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ClusterMemberAddTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ClusterMemberAddServiceUnavailableCode is the HTTP code returned for type ClusterMemberAddServiceUnavailable
const ClusterMemberAddServiceUnavailableCode int = 503

/*ClusterMemberAddServiceUnavailable The request could not be completed due to the server being busy or in a temporarily bad state

swagger:response clusterMemberAddServiceUnavailable
*/
type ClusterMemberAddServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewClusterMemberAddServiceUnavailable creates ClusterMemberAddServiceUnavailable with default headers values
func NewClusterMemberAddServiceUnavailable() *ClusterMemberAddServiceUnavailable {

	return &ClusterMemberAddServiceUnavailable{}
}

// WithPayload adds the payload to the cluster member add service unavailable response
func (o *ClusterMemberAddServiceUnavailable) WithPayload(payload *rest_model.APIErrorEnvelope) *ClusterMemberAddServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the cluster member add service unavailable response
func (o *ClusterMemberAddServiceUnavailable) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ClusterMemberAddServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
